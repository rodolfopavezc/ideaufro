{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/rodolfopavez/Desktop/ideaufro/frontend/src/App.tsx\",\n    _s = $RefreshSig$();\n\n// @ts-ignore\nimport React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Container from \"react-bootstrap/Container\";\nimport useSpeechToText from './Hooks';\nimport micIcon from \"./mic.svg\";\nimport './App.css';\nexport default function App() {\n  _s();\n\n  const {\n    error,\n    interimResult,\n    isRecording,\n    results,\n    startSpeechToText,\n    stopSpeechToText\n  } = useSpeechToText({\n    continuous: true,\n    crossBrowser: true,\n    googleApiKey: process.env.REACT_APP_API_KEY,\n    speechRecognitionProperties: {\n      interimResults: true\n    },\n    useLegacyResults: false\n  });\n\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        maxWidth: '600px',\n        margin: '100px auto',\n        textAlign: 'center'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [error, /*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            fontSize: '3rem'\n          },\n          children: \"\\uD83E\\uDD37\\u200D\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"d-grid gap-2\",\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        variant: \"primary\",\n        size: \"lg\",\n        onClick: isRecording ? stopSpeechToText : startSpeechToText,\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: isRecording ? 'Detener' : 'Comenzar'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          \"data-recording\": isRecording,\n          src: micIcon,\n          alt: \"\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: [results.map(result => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: result.transcript\n        }, result.timestamp, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 11\n        }, this)), interimResult && /*#__PURE__*/_jsxDEV(\"li\", {\n          children: interimResult\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 27\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 11\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 7\n  }, this);\n}\n\n_s(App, \"eXOG1vhXgTpERlurVntqdPCeIGU=\", false, function () {\n  return [useSpeechToText];\n});\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/rodolfopavez/Desktop/ideaufro/frontend/src/App.tsx"],"names":["React","Button","Container","useSpeechToText","App","error","interimResult","isRecording","results","startSpeechToText","stopSpeechToText","continuous","crossBrowser","googleApiKey","process","env","REACT_APP_API_KEY","speechRecognitionProperties","interimResults","useLegacyResults","maxWidth","margin","textAlign","fontSize","micIcon","map","result","transcript","timestamp"],"mappings":";;;;;AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,wBAAnB;AACA,OAAOC,SAAP,MAAsB,2BAAtB;AACA,OAAOC,eAAP,MAA4C,SAA5C;;AAIA,OAAO,WAAP;AAEA,eAAe,SAASC,GAAT,GAAe;AAAA;;AAC5B,QAAM;AACJC,IAAAA,KADI;AAEJC,IAAAA,aAFI;AAGJC,IAAAA,WAHI;AAIJC,IAAAA,OAJI;AAKJC,IAAAA,iBALI;AAMJC,IAAAA;AANI,MAOFP,eAAe,CAAC;AAClBQ,IAAAA,UAAU,EAAE,IADM;AAElBC,IAAAA,YAAY,EAAE,IAFI;AAGlBC,IAAAA,YAAY,EAAEC,OAAO,CAACC,GAAR,CAAYC,iBAHR;AAIlBC,IAAAA,2BAA2B,EAAE;AAAEC,MAAAA,cAAc,EAAE;AAAlB,KAJX;AAKlBC,IAAAA,gBAAgB,EAAE;AALA,GAAD,CAPnB;;AAeA,MAAId,KAAJ,EAAW;AACT,wBACE;AACE,MAAA,KAAK,EAAE;AACLe,QAAAA,QAAQ,EAAE,OADL;AAELC,QAAAA,MAAM,EAAE,YAFH;AAGLC,QAAAA,SAAS,EAAE;AAHN,OADT;AAAA,6BAOE;AAAA,mBACGjB,KADH,eAEE;AAAM,UAAA,KAAK,EAAE;AAAEkB,YAAAA,QAAQ,EAAE;AAAZ,WAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AAPF;AAAA;AAAA;AAAA;AAAA,YADF;AAcD;;AAED,sBACI,QAAC,SAAD;AAAA,2BACI;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA,8BACF,QAAC,MAAD;AAAQ,QAAA,OAAO,EAAC,SAAhB;AAA0B,QAAA,IAAI,EAAC,IAA/B;AAAoC,QAAA,OAAO,EAAEhB,WAAW,GAAGG,gBAAH,GAAsBD,iBAA9E;AAAA,gCACE;AAAA,oBAAOF,WAAW,GAAG,SAAH,GAAe;AAAjC;AAAA;AAAA;AAAA;AAAA,gBADF,eAEA;AAAK,4BAAgBA,WAArB;AAAkC,UAAA,GAAG,EAAEiB,OAAvC;AAAgD,UAAA,GAAG,EAAC;AAApD;AAAA;AAAA;AAAA;AAAA,gBAFA;AAAA;AAAA;AAAA;AAAA;AAAA,cADE,eAKF;AAAA,mBACEhB,OAAD,CAA0BiB,GAA1B,CAA+BC,MAAD,iBAC7B;AAAA,oBAA4BA,MAAM,CAACC;AAAnC,WAASD,MAAM,CAACE,SAAhB;AAAA;AAAA;AAAA;AAAA,gBADD,CADD,EAICtB,aAAa,iBAAI;AAAA,oBAAKA;AAAL;AAAA;AAAA;AAAA;AAAA,gBAJlB;AAAA;AAAA;AAAA;AAAA;AAAA,cALE;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAiBD;;GAlDuBF,G;UAQlBD,e;;;KARkBC,G","sourcesContent":["// @ts-ignore\nimport React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Container from \"react-bootstrap/Container\";\nimport useSpeechToText, { ResultType } from './Hooks';\n\nimport micIcon from './mic.svg';\n\nimport './App.css';\n\nexport default function App() {\n  const {\n    error,\n    interimResult,\n    isRecording,\n    results,\n    startSpeechToText,\n    stopSpeechToText\n  } = useSpeechToText({\n    continuous: true,\n    crossBrowser: true,\n    googleApiKey: process.env.REACT_APP_API_KEY,\n    speechRecognitionProperties: { interimResults: true },\n    useLegacyResults: false\n  });\n\n  if (error) {\n    return (\n      <div\n        style={{\n          maxWidth: '600px',\n          margin: '100px auto',\n          textAlign: 'center'\n        }}\n      >\n        <p>\n          {error}\n          <span style={{ fontSize: '3rem' }}>ü§∑‚Äç</span>\n        </p>\n      </div>\n    );\n  }\n\n  return (\n      <Container>\n          <div className=\"d-grid gap-2\">\n        <Button variant=\"primary\" size=\"lg\" onClick={isRecording ? stopSpeechToText : startSpeechToText}>\n          <span>{isRecording ? 'Detener' : 'Comenzar'}</span>\n        <img data-recording={isRecording} src={micIcon} alt=\"\" />\n        </Button>\n        <ul>\n        {(results as ResultType[]).map((result) => (\n          <li key={result.timestamp}>{result.transcript}</li>\n        ))}\n        {interimResult && <li>{interimResult}</li>}\n      </ul>\n      </div>\n      </Container>\n\n  );\n}\n"]},"metadata":{},"sourceType":"module"}