{"ast":null,"code":"import Recorder from './recorder';\nlet microphoneStream; // stream from getUserMedia()\n\nlet rec = Recorder; // Recorder.js object\n\nlet input; // MediaStreamAudioSourceNode we'll be recording\n\n/**\n *\n * @param {{\n * audioContext: AudioContext\n * errHandler?: () => void\n * onStreamLoad?: () => void\n * }}\n * @returns {Promise<MediaStream>}\n */\n\nexport async function startRecording({\n  audioContext,\n  errHandler,\n  onStreamLoad\n}) {\n  try {\n    const stream = await navigator.mediaDevices.getUserMedia({\n      audio: true\n    });\n\n    if (onStreamLoad) {\n      onStreamLoad();\n    }\n    /*  assign stream for later use  */\n\n\n    microphoneStream = stream;\n    /* use the stream */\n\n    input = audioContext.createMediaStreamSource(stream);\n    rec = new Recorder(input); // start the recording process\n\n    rec.record();\n    return stream;\n  } catch (err) {\n    console.log(err);\n\n    if (errHandler) {\n      errHandler();\n    }\n  }\n}\n/**\n *\n * @param {{\n * exportWAV: boolean\n * wavCallback?: (blob: Blob) => void\n * }}\n */\n\nexport function stopRecording({\n  exportWAV,\n  wavCallback\n}) {\n  // stop recorder.js recording\n  rec.stop(); // stop microphone access\n\n  microphoneStream.getAudioTracks()[0].stop(); // create the wav blob\n\n  if (exportWAV && wavCallback) {\n    rec.exportWAV(blob => wavCallback(blob));\n  }\n\n  rec.clear();\n}","map":{"version":3,"sources":["/Users/rodolfopavez/Desktop/ideaufro/frontend/src/Hooks/recorderHelpers.js"],"names":["Recorder","microphoneStream","rec","input","startRecording","audioContext","errHandler","onStreamLoad","stream","navigator","mediaDevices","getUserMedia","audio","createMediaStreamSource","record","err","console","log","stopRecording","exportWAV","wavCallback","stop","getAudioTracks","blob","clear"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,YAArB;AAEA,IAAIC,gBAAJ,C,CAAsB;;AACtB,IAAIC,GAAG,GAAGF,QAAV,C,CAAoB;;AACpB,IAAIG,KAAJ,C,CAAW;;AAEX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,eAAeC,cAAf,CAA8B;AACnCC,EAAAA,YADmC;AAEnCC,EAAAA,UAFmC;AAGnCC,EAAAA;AAHmC,CAA9B,EAIJ;AACD,MAAI;AACF,UAAMC,MAAM,GAAG,MAAMC,SAAS,CAACC,YAAV,CAAuBC,YAAvB,CAAoC;AAAEC,MAAAA,KAAK,EAAE;AAAT,KAApC,CAArB;;AAEA,QAAIL,YAAJ,EAAkB;AAChBA,MAAAA,YAAY;AACb;AAED;;;AACAN,IAAAA,gBAAgB,GAAGO,MAAnB;AAEA;;AACAL,IAAAA,KAAK,GAAGE,YAAY,CAACQ,uBAAb,CAAqCL,MAArC,CAAR;AAEAN,IAAAA,GAAG,GAAG,IAAIF,QAAJ,CAAaG,KAAb,CAAN,CAbE,CAeF;;AACAD,IAAAA,GAAG,CAACY,MAAJ;AAEA,WAAON,MAAP;AACD,GAnBD,CAmBE,OAAOO,GAAP,EAAY;AACZC,IAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;;AAEA,QAAIT,UAAJ,EAAgB;AACdA,MAAAA,UAAU;AACX;AACF;AACF;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASY,aAAT,CAAuB;AAAEC,EAAAA,SAAF;AAAaC,EAAAA;AAAb,CAAvB,EAAmD;AACxD;AACAlB,EAAAA,GAAG,CAACmB,IAAJ,GAFwD,CAIxD;;AACApB,EAAAA,gBAAgB,CAACqB,cAAjB,GAAkC,CAAlC,EAAqCD,IAArC,GALwD,CAOxD;;AACA,MAAIF,SAAS,IAAIC,WAAjB,EAA8B;AAC5BlB,IAAAA,GAAG,CAACiB,SAAJ,CAAeI,IAAD,IAAUH,WAAW,CAACG,IAAD,CAAnC;AACD;;AAEDrB,EAAAA,GAAG,CAACsB,KAAJ;AACD","sourcesContent":["import Recorder from './recorder';\n\nlet microphoneStream; // stream from getUserMedia()\nlet rec = Recorder; // Recorder.js object\nlet input; // MediaStreamAudioSourceNode we'll be recording\n\n/**\n *\n * @param {{\n * audioContext: AudioContext\n * errHandler?: () => void\n * onStreamLoad?: () => void\n * }}\n * @returns {Promise<MediaStream>}\n */\nexport async function startRecording({\n  audioContext,\n  errHandler,\n  onStreamLoad,\n}) {\n  try {\n    const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n\n    if (onStreamLoad) {\n      onStreamLoad();\n    }\n\n    /*  assign stream for later use  */\n    microphoneStream = stream;\n\n    /* use the stream */\n    input = audioContext.createMediaStreamSource(stream);\n\n    rec = new Recorder(input);\n\n    // start the recording process\n    rec.record();\n\n    return stream;\n  } catch (err) {\n    console.log(err);\n\n    if (errHandler) {\n      errHandler();\n    }\n  }\n}\n\n/**\n *\n * @param {{\n * exportWAV: boolean\n * wavCallback?: (blob: Blob) => void\n * }}\n */\nexport function stopRecording({ exportWAV, wavCallback }) {\n  // stop recorder.js recording\n  rec.stop();\n\n  // stop microphone access\n  microphoneStream.getAudioTracks()[0].stop();\n\n  // create the wav blob\n  if (exportWAV && wavCallback) {\n    rec.exportWAV((blob) => wavCallback(blob));\n  }\n\n  rec.clear();\n}\n"]},"metadata":{},"sourceType":"module"}